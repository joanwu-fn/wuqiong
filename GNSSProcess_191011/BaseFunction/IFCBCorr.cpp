#include "../Common/BaseFunction.h"

const double cdPeriodG[12] = { 177, 177, 177, 176, 177, 177, 174, 172, 172, 176, 174, 177 };
const double cdPeriodC[14] = { 365, 365, 365, 365, 365, 182, 182, 182, 182, 182, 177, 177, 182, 178 };
//========================================================================================================================================================
const double C1_G[12][4] = { { -8.0, -1.1, 9.6, 8.7 },    { -12.1, 17.8, -6.6, 9.0 },   { -10.8, -11.8, 11.4, 6.4 },  { -9.3, -51.6, -3.7, -6.1 },  //G01 G03 G06 G08
 { -19.1, 20.1, -7.9, -3.6 }, { -11.3, 6.4, -8.6, 10.6 },   { -20.2, -14.7, -3.0, -1.0 }, { -15.5, 11.2, -3.0, -0.2 },  //G09 G10 G24 G25
 { -10.7, -55.9, 5.1, -2.0 }, { -11.7, -28.4, -4.1, -7.5 }, { -15.1, -30.9, -2.1, -1.3 }, { -12.6, -21.6, -7.2, -6.2 } }; //G26 G27 G30 G32

const double C2_G[12][6] = { { -4.4, -2.0, 9.9, -3.2, 6.3, -0.5 }, { -10.1, 21.9, -6.5, 6.2, 16.2, -0.5 }, { -5.8, 3.9, 13.0, -4.0, 8.3, -0.8 }, { -3.0, -76.9, -5.9, -0.1, -6.4, -1.6 },  //G01 G03 G06 G08
 { -21.3, 55.9, -18.3, -5.4, -2.0, 0.8 }, { -7.2, 6.4, -6.6, 5.0, 13.7, -0.3 }, { -23.2, 17.9, -8.5, -0.2, 6.4, 1.5 }, { -16.3, -76.0, 0.3, 1.7, -6.6, 1.1 },   //G09 G10 G24 G25
 { -11.2, -57.6, -0.2, 1.0, -4.2, 0.5 }, { -4.0, -45.0, -4.4, -0.1, -6.0, -1.4 }, { -19.4, 3.6, -8.2, -1.0, 3.3, 1.1 }, { -15.9, 28.9, -16.7, -5.0, -2.6, 0.8 } };                    //G26 G27 G30 G32

const double C3_G[12][4] = { { 0.8, -0.1, 1.4, 0.3 }, { 1.2, 1.5, -0.3, -0.5 }, { 0.9, 0.3, 1.0, 0.1 }, { 1.1, 0.4, -1.3, 0.4 },
{ 0.9, 0.5, -0.4, -1.7 }, { 1.0, 0.5, -0.8, 0.5 }, { 3.6, -9.2, -2.2, -2.5 }, { 2.0, 5.8, 0.8, 1.1 },
{ 1.5, 11.6, 2.0, -2.7 }, { 0.6, 3.1, -2.3, -0.2 }, { 3.2, -7.5, -1.3, -2.8 }, { 1.4, -4.9, -0.1, -1.2 }
};

const double C4_G[12][6] = { { 0.4, -0.3, 3.5, -4.1, 1.9, 0.1 }, { -0.3, 2.9, -2.5, 5.9, 3.7, 0.7 }, { 0.6, 0.5, 4.3, -4.9, 2.4, 0.5 }, { 1.6, -9.5, -7.5, -2.5, -3.2, -0.8 },  //G01 G03 G06 G08
{ -0.6, 0.8, -5.5, -5.9, -2.8, -1.1 }, { -0.4, 6.7, -1.9, 4.6, 3.1, 0.5 }, { -0.1, -4.6, -8.0, -2.8, -0.8, 2.1 }, { 0.8, -6.7, 1.6, 3.5, -10.4, -0.5 },                      //G09 G10 G24 G25
{ 0.6, -4.1, 1.5, 1.7, -7.2, -0.2 }, { 0.9, -4.0, -5.1, -2.3, -2.4, -1.1 }, { -0.5, -0.9, -6.7, -2.2, -2.6, 0.7 }, { 0.5, -7.0, -4.5, -5.0, -2.1, -0.6 } };                    //G26 G27 G30 G32
//-----------------------------------------------------------------------------------------------------
const double S1_G[12][4] = { { -18.1, -49.0, 5.2, -8.5 }, { -6.6, -66.0, 9.1, 2.1 }, { -17.9, -45.7, 4.6, -9.4 }, { -18.1, -26.4, -4.0, 4.6 },  //G01 G03 G06 G08
{ -8.0, -29.5, 0.5, 6.3 }, { -10.3, -61.8, 12.1, 4.3 }, { -16.1, 24.3, -1.2, 0.6 }, { 5.1, 19.4, 0.6, -0.8 },                      //G09 G10 G24 G25
{ -18.9, -16.6, -2.5, -3.2 }, { -26.0, -8.1, -7.3, 5.6 }, { -16.7, 16.8, -2.2, 0.7 }, { -11.2, 5.7, -1.5, 6.9 } };                    //G26 G27 G30 G32

const double S2_G[12][6] = { { -11.1, -37.2, 8.5, -0.2, -11.4, 5.5 }, { -10.4, -20.0, 16.2, 0.9, 10.1, -8.4 }, { -14.3, -47.1, 12.2, -1.1, -16.0, 7.4 }, { -23.9, -44.5, -11.3, -3.3, 8.0, 3.9 },
{ -10.3, -2.1, -7.0, -2.2, 17.7, 6.7 }, { -8.6, -21.5, 14.8, 0.9, 8.7, -7.2 }, { -20.8, 73.3, 3.5, 3.6, 13.0, 3.4 }, { -35.0, 64.0, -13.7, -1.9, -5.3, -6.9 },
{ -23.9, 38.3, -7.8, -0.6, -1.3, -2.9 }, { -18.9, -28.4, -9.5, -3.1, 6.0, 3.1 }, { -18.3, 59.6, -0.1, 1.5, 11.2, 3.5 }, { -10.6, 12.7, -4.9, -1.8, 15.9, 6.5 }
};                //G26 G27 G30 G32

const double S3_G[12][4] = { { -0.0, 3.1, 1.1, -3.3 }, { -1.0, 5.5, 2.5, 2.2 }, { -0.4, 5.2, 1.0, -4.2 }, { 0.8, -2.2, -2.8, 4.4 },
{ -1.9, 8.4, -4.9, 2.5 }, { -0.1, -1.3, 2.6, 1.9 }, { -0.9, -1.2, -3.6, 6.5 }, { -3.4, -4.5, -6.3, -3.4 },
{ 1.9, -14.4, -5.7, -3.4 }, { 0.6, 3.2, -2.0, 4.5 }, { -0.2, -2.4, -4.6, 4.8 }, { -1.1, 6.4, -3.9, 1.8 }
};

const double S4_G[12][6] = { { -0.6, -4.7, 2.4, 0.6, -4.7, 4.9 }, { -1.5, 3.1, 4.8, 0.1, 3.5, -7.0 }, { -1.1, -7.2, 3.4, 1.0, -6.3, 6.0 }, { -2.0, -6.7, -4.3, -0.9, 9.3, 4.1 },  //G01 G03 G06 G08
{ -1.4, -2.1, -4.9, -2.1, 6.1, 6.9 }, { -1.1, 1.0, 4.3, 0.3, 2.9, -5.6 }, { -3.1, 10.4, -1.3, 3.6, 10.7, 3.5 }, { -4.4, 5.5, -15.2, -2.5, -2.7, -5.1 },                      //G09 G10 G24 G25
{ -1.8, -5.2, -9.4, -1.3, -1.5, -2.3 }, { -1.2, -4.2, -3.6, -1.3, 6.5, 3.5 }, { -2.0, 3.4, -2.8, 1.5, 8.4, 3.7 }, { -1.7, 4.6, -3.7, -1.4, 5.0, 6.4 } };                    //G26 G27 G30 G32
//-----------------------------------------------------------------------------------------------------
const double S1_G_E[12][4] = { { 99.9, -11.8, 124.8, -96.3 }, { 139.8, -65.1, 94.3, 163.3 }, { 131.1, -33.3, 155.8, -123.5 }, { 56.8, -78.3, -107.6, 44.9 }, //G01 G03 G06 G08
{ 148.8, -4.0, -186.4, 71.5 }, { 141.8, -87.2, 94.6, 162.6 }, { 35.4, 60.0, -45.6, 83.5 }, { 60.4, 93.7, -97.7, -80.2 },   //G09 G10 G24 G25
{ -2.3, -41.7, -34.1, -29.5 }, { 28.9, -30.7, -82.0, 32.8 }, { 21.1, 45.6, -44.9, 52.6 }, { 140.9, -101.5, -162.6, 65.6 } };                    //G26 G27 G30 G32
//===========================================================================================================================================================

//==========================================================================================
const double C1_C[14][4] = { { -5.5, -2.9, -0.6, -0.6 }, { 2.2, 10.0, -0.2, -0.4 }, { -4.3, -7.2, -1.4, 0.0 }, { -3.7, -10.5, -0.6, -0.5 }, { -2.8, -17.4, -0.3, -3.0 },
{ 11.3, -9.6, 10.7, 1.4 }, { 1.2, 9.9, 0.4, -0.5 }, { 0.1, -2.3, 0.5, -0.3 }, { 3.7, -6.4, 2.7, 0.2 },
{ 5.0, 8.4, -0.7, -1.0 }, { -0.7, 7.0, -0.3, 0.4 }, { -0.0, -0.4, 0.4, -1.0 },
{ 1.7, 5.0, -2.2, 0.8 }, { 0.6, -2.0, 1.2, 0.6 } };

const double C2_C[14][4] = { { 2.8, 1.5, 0.0, -0.5 }, { 4.4, -9.0, -0.3, -3.3 }, { 3.3, 4.1, -0.3, -1.7 }, { 3.0, 2.0, 0.1, -0.6 }, { 2.6, -13.9, -2.1, -5.8 },
{ 0.5, 0.5, 1.5, 1.0 }, { 0.4, -5.6, 0.2, -0.2 }, { -0.5, 3.9, -0.7, 0.2 },
{ -0.1, -3.3, -0.1, 0.6 }, { 0.2, -0.7, 0.5, 0.1 }, { -0.3, 0.6, 0.1, -0.1 }, { 0.2, 0.9, 0.4, 0.4 },
{ -0.4, 0.5, -0.7, -0.6 }, { -0.1, -1.2, 0.3, 0.3 } };

const double C3_C[14][4] = { { 0.1, -1.1, 0.0, -0.2 }, { 0.3, 0.9, -0.4, -0.8 }, { 0.2, -0.3, 0.2, -0.3 }, { 0.1, -0.6, -0.1, -0.3 }, { 0.7, -0.4, -0.1, -0.2 },
{ 0.0, -1.0, 2.4, -0.3 }, { 0.3, -3.4, -0.2, 0.2 }, { 0.0, -0.2, 0.1, 0.1 },
{ -0.1, 1.3, 0.8, -0.1 }, { 0.7, -2.5, -0.3, -0.8 }, { 0.1, -1.2, -0.1, 0.3 }, { 0.1, -0.8, 0.2, -0.6 },
{ 1.5, -13.1, -0.4, 0.6 }, { 0.0, 0.3, 0.2, 0.2 } };

const double C4_C[14][4] = { { 0.1, 1.2, 0.1, -0.3 }, { -0.8, 2.0, 0.3, -0.2 }, { 0.2, 1.1, 0.1, 0.0 }, { 0.3, -1.0, 0.2, -0.2 }, { 0.2, -2.0, 0.1, -0.5 },
{ -0.2, -0.6, 0.2, 0.3 }, { 0.3, -1.5, -0.0, -0.1 }, { 0.3, -1.0, -0.4, -0.0 },
{ -0.2, 1.9, -0.0, 0.1 }, { -0.3, -1.2, 0.1, 0.0 }, { -0.1, 0.2, 0.0, 0.1 }, { 0.1, -0.6, 0.3, 0.1 },
{ -0.3, 1.9, -0.1, -0.1 }, { -0.0, -0.7, -0.0, 0.2 }
};

const double S1_C[14][4] = { { -12.3, -11.4, -0.8, -3.8 }, { -6.7, 12.5, -1.1, -2.0 }, { -15.1, -31.9, -1.9, -4.6 }, { -12.8, -18.5, -1.7, -4.2 }, { -19.5, -6.0, -2.9, -8.0 },
{ 11.4, 16.3, -1.1, -8.8 }, { 0.5, -14.6, -0.4, 0.2 }, { -0.1, -9.3, 0.5, -0.9 },
{ 3.8, -7.9, -0.5, -2.3 }, { 5.7, -7.9, -0.9, 0.4 }, { 1.0, 2.1, 0.4, 0.5 }, { -2.1, -19.5, -0.9, -1.4 },
{ 13.3, -72.4, 0.4, 2.7 }, { 2.1, -4.7, 0.6, -0.9 } };

const double S2_C[14][4] = { { 0.9, 0.6, -0.2, -0.6 }, { -0.5, -4.1, 0.2, 0.6 }, { -0.5, 0.5, 0.4, 0.8 }, { -0.5, 2.7, 0.1, 0.6 }, { -1.5, 3.2, 0.0, -0.1 },
{ 0.7, 1.3, 0.5, -2.4 }, { 0.7, -2.7, -0.3, -0.6 }, { 0.5, -0.2, -0.1, 0.5 },
{ 0.0, -0.9, 0.4, 0.3 }, { 0.1, 0.3, -0.2, -0.8 }, { 0.0, 1.9, -0.1, -0.2 }, { -0.3, -0.4, 0.2, -0.4 },
{ -2.3, 26.4, -0.5, 1.1 }, { 0.3, -1.0, 0.4, -0.5 } };

const double S3_C[14][4] = { { 0.9, 0.6, -0.2, -0.6 }, { -0.5, -4.1, 0.2, 0.6 }, { -0.5, 0.5, 0.4, 0.8 }, { -0.5, 2.7, 0.1, 0.6 }, { -1.5, 3.2, 0.0, -0.1 },
{ -0.2, -0.0, -0.1, -2.5 }, { -0.5, 4.0, 0.3, 0.1 }, { -0.3, 2.1, 0.0, -0.0 },
{ -0.1, -0.9, -0.2, -0.9 }, { -0.3, 1.2, -0.6, 0.7 }, { -0.0, 0.2, 0.2, 0.0 }, { 0.0, -1.6, -0.5, -0.4 },
{ -1.0, 6.8, 0.6, 0.5 }, { 0.0, -0.3, 0.3, -0.2 } };

const double S4_C[14][4] = { { 0.3, -0.6, -0.1, -0.2 }, { 0.9, -6.1, 0.3, -0.6 }, { 0.4, 1.4, -0.1, -0.2 }, { 0.5, -0.4, -0.1, 0.0 }, { 0.7, -3.2, -0.2, -0.4 },
{ 0.1, -0.2, 0.5, -0.3 }, { -0.6, 3.6, 0.1, -0.1 }, { 0.0, -0.5, 0.2, 0.3 },
{ -0.0, 0.3, 0.1, 0.0 }, { -0.3, -0.4, 0.1, -0.2 }, { -0.0, -0.1, 0.1, -0.0 }, { 0.1, -1.3, 0.1, -0.2 },
{ 0.5, -4.4, 0.2, 0.3 }, { 0.0, 0.4, 0.1, -0.1 } };

const double C2_C_E[5][4] = { { 4.3, 2.7, 0.8, 1.3 }, { 4.5, 24.0, -0.2, -1.6 }, { 6.6, 7.6, -0.6, -2.4 }, { 5.6, 1.2, 0.5, 0.4 }, { 10.2, 1.7, -0.9 - 2.5 } };
const double C3_C_E[5][4] = { { 0.8, 4.2, 1.4, 3.7 }, { 1.2, 0.1, 2.9, 4.2 }, { 2.2, -2.8, 2.3, 5.2 }, { 1.4, 2.7, 1.3, 3.1 }, { 3.5, 0.2, 1.7, 4.1 } };
const double S1_C_E[5][4] = { { -20.5, -8.5, 1.7, 2.6 }, { -14.2, 6.6, 5.0, 16.1 }, { -33.6, -8.2, 6.5, 15.5 }, { -25.0, -22.5, 4.3, 12.5 }, { -51.1, 61.1, 17.5, 52.4 } };
const double S2_C_E[5][4] = { { 3.0, -0.1, -0.4, -0.3 }, { 3.1, 1.9, -3.9, -7.5 }, { 4.8, 4.6, -1.9, -3.6 }, { 3.7, 5.0, -0.5, -1.1 }, { 6.8, -3.1, -2.6, -5.1 } };
const double S3_C_E[5][4] = { { 1.8, 1.1, 0.0, 0.5 }, { 2.3, -12.8, 0.0, 1.5 }, { 1.8, 3.6, 1.2, 3.5 }, { 1.5, -0.6, 1.2, 3.9 }, { 1.9, 2.9, 2.3, 7.1 } };
const double S4_C_E[5][4] = { { 1.5, -2.2, 1.3, 4.0 }, { 2.4, 0.1, 1.5, -0.1 }, { 3.0, -1.5, 1.3, 3.9 }, { 2.2, 1.8, 1.1, 3.0 }, { 4.2, 2.5, 1.0, 3.1 } };

void GetSatIFCBCoef(char Sys, int prn, int MJDN, double dBeta, double dCos[4], double dSin[4])
{
	memset(dCos, 0x00, sizeof(double) * 4);
	memset(dSin, 0x00, sizeof(double) * 4);
	double muT, dt = (MJDN - 56658) * 1e-4;
	if (Sys == 'G')
	{
		int PrnList[12] = { 1, 3, 6, 8, 9, 10, 24, 25, 26, 27, 30, 32}, itmp = 0;
		for (itmp = 0; itmp < 12; itmp++)
		{
			if (prn == PrnList[itmp])
			{
				break;
			}
		}
		if (itmp == 12)
		{
			return;
		}
		double Period = cdPeriodG[itmp];
		muT = ((MJDN % (int)(Period)) * 2 * 3.1415926 / Period);

		dCos[0] = C1_G[itmp][0] + C1_G[itmp][1] * dt + C1_G[itmp][2] * cos(muT) + C1_G[itmp][3] * sin(muT);
		dCos[1] = C2_G[itmp][0] + C2_G[itmp][1] * dt + C2_G[itmp][2] * cos(muT) + C2_G[itmp][4] * sin(muT)
			+ C2_G[itmp][3] * cos(2 * muT) + C2_G[itmp][5] * sin(2 * muT);
		dCos[2] = C3_G[itmp][0] + C3_G[itmp][1] * dt + C3_G[itmp][2] * cos(muT) + C3_G[itmp][3] * sin(muT);
		dCos[3] = C4_G[itmp][0] + C4_G[itmp][1] * dt + C4_G[itmp][2] * cos(muT) + C4_G[itmp][4] * sin(muT)
			+ C4_G[itmp][3] * cos(2 * muT) + C4_G[itmp][5] * sin(2 * muT);

		dSin[1] = S2_G[itmp][0] + S2_G[itmp][1] * dt + S2_G[itmp][2] * cos(muT) + S2_G[itmp][4] * sin(muT)
			+ S2_G[itmp][3] * cos(2 * muT) + S2_G[itmp][5] * sin(2 * muT);
		dSin[2] = S3_G[itmp][0] + S3_G[itmp][1] * dt + S3_G[itmp][2] * cos(muT) + S3_G[itmp][3] * sin(muT);
		dSin[3] = S4_G[itmp][0] + S4_G[itmp][1] * dt + S4_G[itmp][2] * cos(muT) + S4_G[itmp][4] * sin(muT)
			+ S4_G[itmp][3] * cos(2 * muT) + S4_G[itmp][5] * sin(2 * muT);
		if (fabs(dBeta) < 14.0)
		{
			dSin[0] = S1_G_E[itmp][0] + S1_G_E[itmp][1] * dt + S1_G_E[itmp][2] * cos(muT) + S1_G_E[itmp][3] * sin(muT);
		}
		else
		{
			dSin[0] = S1_G[itmp][0] + S1_G[itmp][1] * dt + S1_G[itmp][2] * cos(muT) + S1_G[itmp][3] * sin(muT);
		}
	}
	else if (Sys == 'C')
	{
		if (prn >  14)
		{
			return;
		}
		int prn_1 = prn - 1;
		double Period = cdPeriodC[prn_1];

		muT = ((MJDN % (int)(Period)) * 2 * 3.1415926 / Period);
		dCos[0] = C1_C[prn_1][0] + C1_C[prn_1][1] * dt + C1_C[prn_1][2] * cos(muT) + C1_C[prn_1][3] * sin(muT);
		dCos[3] = C4_C[prn_1][0] + C4_C[prn_1][1] * dt + C4_C[prn_1][2] * cos(muT) + C4_C[prn_1][3] * sin(muT);

		if (prn_1 < 5 && fabs(dBeta) < 8.0) //GEO
		{
			dCos[1] = C2_C_E[prn_1][0] + C2_C_E[prn_1][1] * dt + C2_C_E[prn_1][2] * cos(muT) + C2_C_E[prn_1][3] * sin(muT);
			dCos[2] = C3_C_E[prn_1][0] + C3_C_E[prn_1][1] * dt + C3_C_E[prn_1][2] * cos(muT) + C3_C_E[prn_1][3] * sin(muT);
			dSin[1] = S2_C_E[prn_1][0] + S2_C_E[prn_1][1] * dt + S2_C_E[prn_1][2] * cos(muT) + S2_C_E[prn_1][3] * sin(muT);
			dSin[2] = S3_C_E[prn_1][0] + S3_C_E[prn_1][1] * dt + S3_C_E[prn_1][2] * cos(muT) + S3_C_E[prn_1][3] * sin(muT);
			dSin[3] = S4_C_E[prn_1][0] + S4_C_E[prn_1][1] * dt + S4_C_E[prn_1][2] * cos(muT) + S4_C_E[prn_1][3] * sin(muT);
		}
		else 
		{
			dCos[1] = C2_C[prn_1][0] + C2_C[prn_1][1] * dt + C2_C[prn_1][2] * cos(muT) + C2_C[prn_1][3] * sin(muT);
			dCos[2] = C3_C[prn_1][0] + C3_C[prn_1][1] * dt + C3_C[prn_1][2] * cos(muT) + C3_C[prn_1][3] * sin(muT);
			dSin[1] = S2_C[prn_1][0] + S2_C[prn_1][1] * dt + S2_C[prn_1][2] * cos(muT) + S2_C[prn_1][3] * sin(muT);
			dSin[2] = S3_C[prn_1][0] + S3_C[prn_1][1] * dt + S3_C[prn_1][2] * cos(muT) + S3_C[prn_1][3] * sin(muT);
			dSin[3] = S4_C[prn_1][0] + S4_C[prn_1][1] * dt + S4_C[prn_1][2] * cos(muT) + S4_C[prn_1][3] * sin(muT);
		}
		if (prn_1 < 5 && dBeta > 8.0)  //GEO
		{
			dSin[0] = S1_C_E[prn_1][0] + S1_C_E[prn_1][1] * dt + S1_C_E[prn_1][2] * cos(muT) + S1_C_E[prn_1][3] * sin(muT);
		}
		else                           //GEO
		{
			dSin[0] = S1_C[prn_1][0] + S1_C[prn_1][1] * dt + S1_C[prn_1][2] * cos(muT) + S1_C[prn_1][3] * sin(muT);
		}
		if (prn_1 == 5 && fabs(dBeta) < 4) //C06
		{
			dSin[0] = 8;
		}
	}
	return;
}

double GetIFCBCorr(char chSys, int prn, int MJDN, double dBeta, double mu)
{
	double dCos[4] = { 0.0 }, dSin[4] = { 0.0 }, dIFCB = 0.0;
	GetSatIFCBCoef(chSys, prn, MJDN, dBeta, dCos, dSin);
	dIFCB = dCos[0] * cos(mu) + dCos[1] * cos(2 * mu) + dCos[2] * cos(3 * mu) + dCos[3] * cos(4 * mu) +
		dSin[0] * sin(mu) + dSin[1] * sin(2 * mu) + dSin[2] * sin(3 * mu) + dSin[3] * sin(4 * mu);
	return dIFCB;
}

double GetIFCBCorr(double dCos[4], double dSin[4], double mu)
{
	double dIFCB = 0.0;
	dIFCB = dCos[0] * cos(mu) + dCos[1] * cos(2 * mu) + dCos[2] * cos(3 * mu) + dCos[3] * cos(4 * mu) +
		dSin[0] * sin(mu) + dSin[1] * sin(2 * mu) + dSin[2] * sin(3 * mu) + dSin[3] * sin(4 * mu);
	return dIFCB;
}

double GetBetaAngle(double XSun[3], double SatXYZ[3], double VSat[3])
{
	double dist = 0;
	for (int j = 0; j < 3; j++)
	{
		dist += (SatXYZ[j] * SatXYZ[j]);
	}
	dist = sqrt(dist);
	/*-------------------------------------------------------apply correction of earth rotation----------------------------------------------------*/
	double rotateDegree = dist * G_OMGE[0] / CLIGHT;
	double x0 = SatXYZ[0];
	double x1 = SatXYZ[1];
	SatXYZ[0] = cos(rotateDegree) * x0 + sin(rotateDegree) * x1;
	SatXYZ[1] = -sin(rotateDegree) * x0 + cos(rotateDegree) * x1;
	double v0 = VSat[0];
	double v1 = VSat[1];
	VSat[0] = v0 - SatXYZ[1] * G_OMGE[0];
	VSat[1] = v1 + SatXYZ[0] * G_OMGE[0];
	/*-------------------------------------------------------apply correction of earth rotation----------------------------------------------------*/
	Coordinate RVec(SatXYZ[0], SatXYZ[1], SatXYZ[2]);
	Coordinate coorTmp(VSat[0], VSat[1], VSat[2]);
	Coordinate orbnorm = unit(coorTmp % RVec);
	Coordinate sunTmp = unit(Coordinate(XSun[0], XSun[1], XSun[2]));
	double tmp1[3] = { orbnorm.X, orbnorm.Y, orbnorm.Z };
	double tmp2[3] = { sunTmp.X, sunTmp.Y, sunTmp.Z };
	double beta = asin(Dot(3, tmp1, tmp2)) * R2D;
	return beta;
}